import logging

from device.road_side_unit import RoadsideUnit
from mesa import Agent
from models import model_factory
from pandas import DataFrame

from src.core.constants import MainKey, ModelName
from src.device.base_station import BaseStation
from src.device.payload import RSUPayload, VehiclePayload, VehicleResponse
from src.device.vehicle import Vehicle
from src.models.allocator import V2BAllocator, V2RAllocator

logger = logging.getLogger(__name__)


class EdgeOrchestrator(Agent):
    def __init__(
        self,
        v2v_links_df: DataFrame,
        v2b_links_df: DataFrame,
        v2r_links_df: DataFrame,
        r2b_links_df: DataFrame,
        r2r_links_df: DataFrame,
        model_data: dict,
    ):
        """
        Initialize the edge orchestrator.

        Parameters
        ----------
        v2v_links_df : DataFrame
            The v2v links.
        v2b_links_df : DataFrame
            The v2b links.
        v2r_links_df : DataFrame
            The v2r links.
        r2b_links_df : DataFrame
            The r2b links.
        r2r_links_df : DataFrame
            The r2r links.
        model_data : dict
            The model data.
        """
        super().__init__(990000, None)
        self.type: str = MainKey.EDGE_ORCHESTRATOR
        self.model = None

        self._vehicles: dict[int, Vehicle] = {}
        self._base_stations: dict[int, BaseStation] = {}
        self._roadside_units: dict[int, RoadsideUnit] = {}

        self._v2v_links: DataFrame = v2v_links_df
        self._v2b_links: DataFrame = v2b_links_df
        self._v2r_links: DataFrame = v2r_links_df
        self._r2b_links: DataFrame = r2b_links_df
        self._r2r_links: DataFrame = r2r_links_df

        self._v2b_allocator: V2BAllocator | None = None
        self._v2r_allocator: V2RAllocator | None = None

        # Payloads generated by the vehicles
        self.v2b_payload_map: dict[int, VehiclePayload] = {}
        self.v2r_payload_map: dict[int, VehiclePayload] = {}
        self.v2v_payload_map: dict[int, VehiclePayload] = {}

        # Payloads generated by the RSUs.
        self.r2b_payload_map: dict[int, RSUPayload] = {}
        self.r2r_payload_map: dict[int, RSUPayload] = {}

        # Downlink data arrived at the base stations from the controllers
        self.downlink_response_at_basestations: dict[
            int, dict[int, VehicleResponse]
        ] = {}

        self._total_v2v_data_sent: float = 0
        self._vehicles_in_range: int = 0

        # Create the models
        self._create_models(model_data)

    @property
    def data_generated_at_device(self) -> float:
        """Get the data generated at the device."""
        return -1.0

    @property
    def vehicles_in_range(self) -> int:
        """Get the number of vehicles in range."""
        return self._vehicles_in_range

    def get_total_sidelink_data_size(self) -> float:
        """
        Get the total sidelink data size.
        """
        return self._total_v2v_data_sent

    def active_vehicle_count(self) -> int:
        """
        Get the active vehicle count.
        """
        return len(self._vehicles)

    def active_base_station_count(self) -> int:
        """
        Get the active base station count.
        """
        return len(self._base_stations)

    def add_vehicle(self, vehicle: Vehicle) -> None:
        """
        Add a new vehicle.
        """
        self._vehicles[vehicle.unique_id] = vehicle

    def remove_vehicle(self, vehicle_id: int) -> None:
        """
        Remove the vehicle.
        """
        self._vehicles.pop(vehicle_id)

    def add_base_station(self, base_station: BaseStation) -> None:
        """
        Add a new base station.
        """
        self._base_stations[base_station.unique_id] = base_station

    def remove_base_station(self, base_station_id: int) -> None:
        """
        Remove the base station.
        """
        self._base_stations.pop(base_station_id)

    def update_v2v_links(self, v2v_links: DataFrame) -> None:
        """
        Update the V2V links.
        """
        self._v2v_links = v2v_links

    def update_v2b_links(self, v2b_links: DataFrame) -> None:
        """
        Update the V2B links.
        """
        self._v2b_links = v2b_links
        self._v2b_allocator.update_base_station_links(v2b_links)

    def _create_models(self, model_data: dict):
        """
        Create the models.
        """
        self._v2b_allocator = model_factory.create_v2b_allocator(
            self._v2b_links,
            model_data[ModelName.V2B_ALLOCATOR],
        )
        self._v2r_allocator = model_factory.create_v2r_allocator(
            self._v2r_links,
            model_data[ModelName.V2R_ALLOCATOR],
        )
        self._v2v_allocator = model_factory.create_v2v_allocator(
            self._v2v_links,
            model_data[ModelName.V2V_ALLOCATOR],
        )
        self._r2b_allocator = model_factory.create_r2b_allocator(
            self._r2b_links,
            model_data[ModelName.R2B_ALLOCATOR],
        )
        self._r2r_allocator = model_factory.create_r2r_allocator(
            self._r2r_links,
            model_data[ModelName.R2R_ALLOCATOR],
        )

    def uplink_stage(self) -> None:
        """
        Step through the orchestration process for the uplink stage.
        """
        logger.debug(f"Uplink stage at time {self.model.current_time}")
        # Step through the models.
        self._v2b_allocator.current_time = self.model.current_time
        self._v2b_allocator.step()
        self._v2r_allocator.current_time = self.model.current_time
        self._v2r_allocator.step()
        self._v2v_allocator.current_time = self.model.current_time
        self._v2v_allocator.step()

        self._collect_incoming_data()
        self._execute_data_transfers()

    def _collect_incoming_data(self):
        """
        Collect the incoming data from the vehicles.
        """
        self._collect_v2v_payloads()
        self._collect_v2r_payloads()
        self._collect_v2b_payloads()
        self._collect_r2b_payloads()
        self._collect_r2r_payloads()

    def _collect_v2v_payloads(self) -> None:
        """
        Collect the v2v data from the vehicles.
        """
        logger.debug("Collecting v2v payloads from vehicles")
        self.v2v_payload_map.clear()

        for vehicle_id, vehicle in self._vehicles.items():
            self.v2v_payload_map[vehicle_id] = vehicle.v2v_payload
            vehicle.use_network_for_v2v_payload()

    def _collect_v2r_payloads(self) -> None:
        """
        Collect the v2r data from the vehicles.
        """
        logger.debug("Collecting v2r payloads from vehicles")
        self.v2r_payload_map.clear()

        for vehicle_id, vehicle in self._vehicles.items():
            self.v2r_payload_map[vehicle_id] = vehicle.v2r_payload
            vehicle.use_network_for_v2r_payload()

    def _collect_v2b_payloads(self) -> None:
        """
        Collect the v2b data from the vehicles.
        """
        logger.debug("Collecting v2b payload from vehicles")
        self.v2b_payload_map.clear()
        self._vehicles_in_range = len(self._vehicles)

        for vehicle_id, vehicle in self._vehicles.items():
            self.v2b_payload_map[vehicle_id] = vehicle.v2b_payload
            vehicle.use_network_for_v2b_payload()

    def _collect_r2b_payloads(self) -> None:
        """
        Collect the r2b data from the RSUs.
        """
        logger.debug("Collecting r2b payload from vehicles")
        self.r2b_payload_map.clear()

        for rsu_id, rsu in self._roadside_units.items():
            self.r2b_payload_map[rsu_id] = rsu.r2b_payload
            rsu.use_network_for_r2b_payload()

    def _collect_r2r_payloads(self) -> None:
        """
        Collect the r2r data from the RSUs.
        """
        logger.debug("Collecting r2r payload from vehicles")
        self.r2r_payload_map.clear()

        for rsu_id, rsu in self._roadside_units.items():
            self.r2r_payload_map[rsu_id] = rsu.r2r_payload
            rsu.use_network_for_r2r_payload()

    def _execute_data_transfers(self):
        """
        Execute the data transfers.
        """
        self._transmit_v2b_data()
        self._transmit_v2r_data()
        self._transmit_v2v_data()
        self._transmit_r2b_data()
        self._transmit_r2r_data()

    def _transmit_v2b_data(self) -> None:
        """
        Transmit the v2b data.
        """
        logger.debug("Sending data to base stations")
        received_base_stations = []
        for vehicle_id, vehicle_data in self.v2b_payload_map.items():
            station_ids = self._v2b_allocator.get_basestation_for_vehicle(vehicle_id)

            base_station_id = station_ids[0]
            self._vehicles[vehicle_id].selected_bs = base_station_id

            self._base_stations[base_station_id].assign_v2b_data(vehicle_data)
            received_base_stations.append(base_station_id)

        # Consume the wireless network bandwidth in the base stations that received data.
        for station_id in received_base_stations:
            self._base_stations[station_id].use_network_for_received_v2b()

    def _transmit_v2r_data(self):
        """
        Transmit the sidelink v2r data.
        """
        self._total_v2r_data_sent = 0.0
        received_roadside_units = []
        for vehicle_id, v2r_data in self.v2r_payload_map.items():
            this_vehicle = self._vehicles[vehicle_id]
            rsu_id = self._v2r_allocator.get_rsu_for_vehicle(vehicle_id)

            if rsu_id == -1:
                continue

            self._roadside_units[rsu_id].assign_v2r_data(v2r_data)
            received_roadside_units.append(rsu_id)

            this_vehicle.use_network_for_v2r_payload()
            self._total_v2r_data_sent += v2r_data.total_data_size

        # Consume the wireless network bandwidth in the roadside units that received data.
        for rsu_id in received_roadside_units:
            self._roadside_units[rsu_id].use_network_for_received_v2r()

    def _transmit_v2v_data(self):
        """
        Transmit the sidelink v2v data.
        """
        self._total_v2v_data_sent = 0.0
        received_vehicles = []
        for vehicle_id, vehicle_data in self.v2v_payload_map.items():
            neighbour_ids = self._v2v_allocator.get_neighbours_for_vehicle(vehicle_id)

            if len(neighbour_ids) == 0:
                continue

            for veh_id in neighbour_ids:
                self._vehicles[veh_id].assign_v2v_data(vehicle_data)
                received_vehicles.append(veh_id)
                self._total_v2v_data_sent += vehicle_data.total_data_size

        # Consume the wireless network bandwidth in the vehicles that received data.
        for vehicle_id in received_vehicles:
            self._vehicles[vehicle_id].use_network_for_received_v2v()

    def _transmit_r2b_data(self) -> None:
        """
        Transmit the r2b data.
        """
        active_base_stations = []
        for base_station_id, rsu_payload in self.r2b_payload_map.items():
            self._base_stations[base_station_id].assign_r2b_data(rsu_payload)
            active_base_stations.append(base_station_id)

        # Consume the wireless network bandwidth in the base stations that received data.
        for base_station_id in active_base_stations:
            self._base_stations[base_station_id].use_network_for_received_r2b()

    def _transmit_r2r_data(self) -> None:
        """
        Transmit the r2r data.
        """
        received_roadside_units = []
        for rsu_id, rsu_payload in self.r2r_payload_map.items():
            self._roadside_units[rsu_id].assign_r2r_data(rsu_payload)
            received_roadside_units.append(rsu_id)

        # Consume the wireless network bandwidth in the roadside units that received data.
        for rsu_id in received_roadside_units:
            self._roadside_units[rsu_id].use_network_for_r2r_payload()

    def downlink_stage(self) -> None:
        """
        Step through the orchestration process for the downlink stage.
        """
        logger.debug(f"Downlink stage at time {self.model.current_time}")
        # Collect data from each base station
        self._collect_data_from_basestations()

        # Send data to vehicles
        self._send_data_to_vehicles()

    def _collect_data_from_basestations(self):
        """
        Collect data from the base stations.
        """
        logger.debug("Collecting data from base stations")
        self.downlink_response_at_basestations.clear()

        for base_station_id, base_station in self._base_stations.items():
            self.downlink_response_at_basestations[
                base_station_id
            ] = base_station.downlink_vehicle_data
            base_station.use_wireless_for_v2b_response()

    def _send_data_to_vehicles(self):
        """
        Send data to the vehicles.
        """
        logger.debug("Sending data to vehicles")
        for base_station_data in self.downlink_response_at_basestations.values():
            for vehicle_id, veh_data in base_station_data.items():
                self._vehicles[vehicle_id]._v2b_response = veh_data
                # Consume the network bandwidth in the vehicle.
                self._vehicles[vehicle_id].use_network_for_v2r_payload()

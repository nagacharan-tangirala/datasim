from abc import abstractmethod
from collections import deque

import pandas as pd
from mesa import Agent


class AgentBase(Agent):
    def __init__(self, agent_id: int, sim_model=None):
        """
        Initialize the agent.
        """
        super().__init__(agent_id, sim_model)

        self.sim_model = sim_model
        self.active = False

        self.positions: pd.DataFrame | None = None
        self.current_position = None
        self.start_time: int = 0
        self.end_time: int = 0

        self.agent_data = 0
        self.data_sent: bool = False
        self.agent_data_cache = deque(maxlen=2)

    @abstractmethod
    def step(self, *args, **kwargs):
        """
        Step function for the agent.
        """
        pass

    @abstractmethod
    def _generate_data(self) -> None:
        """
        Generate data for the agent.
        """
        pass

    def get_neighbour_data(self) -> dict[int, float]:
        """
        Get the data from the neighbours.
        """
        return {}

    @abstractmethod
    def _initiate_models(self) -> None:
        """
        Initiate the models related to this agent.
        """
        pass

    @abstractmethod
    def _deactivate_models(self) -> None:
        """
        Deactivate the models related to this agent.
        """
        pass

    @abstractmethod
    def set_mobility_data(self, positions: pd.DataFrame) -> None:
        """
        Set the mobility data for the agent.
        """
        pass

    @abstractmethod
    def set_coverage_data(self, coverage: pd.DataFrame) -> None:
        """
        Set the coverage data for the agent.
        """
        pass

    def set_data_transmit_status(self, flag: bool) -> None:
        """
        Set the data sent flag.
        """
        self.data_sent = flag

    def get_data_transmit_status(self) -> bool:
        """
        Get the data sent flag.
        """
        return self.data_sent

    def get_id(self) -> int:
        """
        Get the agent id.
        """
        return self.unique_id

    def get_position(self) -> list[float]:
        """
        Get the current position of the agent.
        """
        return self.current_position

    def is_active(self) -> bool:
        """
        Check if the agent is active.
        """
        return self.active

    def toggle_status(self):
        """
        Toggle the active status of the agent.
        """
        # Toggle the status
        self.active = not self.active

        if self.active:
            # Initiate the models
            self._initiate_models()
        else:
            # Deactivate the models
            self._deactivate_models()

    def get_data(self) -> float:
        """
        Get the data generated by the agent.
        """
        return self.agent_data

    def get_start_and_end_time(self) -> tuple[int, int]:
        """
        Get the start and end time of the agent.
        """
        return self.start_time, self.end_time

    def get_cached_data(self):
        """
        Get the data cached by the agent.
        """
        return self.agent_data_cache[-1]
